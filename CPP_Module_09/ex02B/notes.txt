IT00
Input:
5 2 3 1 4 7 6
Pair:
5--3--4
|  |  |
2  1  7 ~6
Sort pairs:
2--1--4
|  |  |
5  3  7 ~6
Sort new list recursively:

IT01
Input:
2 1 4
Pair:
2
|  
1 ~4  
Sort pairs:
1
|
2 ~4
Sort new list recursively:

IT02
Input:
1
OUT

IT01
1
|
2 ~4
main_chain:
1
pend:
2
remainder:
4
Insert b1
2--1
pend was inserted

insert leftovers
4--2--1
OUT

IT00
4--2--1
|  |  |
7  5  3 ~6
main_chain:
4 2 1
pend:
7 5 3
remainder:
6
Insert b1
7 4 2 1
    5 3 ~6

Insert b3
7 4 3 2 1
      5   ~6

Insert b2
7 5 4 3 2 1
            ~6

Pend inserted

Insert leftovers

7 6 5 4 3 2 1


-----------------------------------

4--2--1
|  |  |
7  5  3 ~6

Insert b1:

// J(N) means Nth Jacobsthal number

k=0
i=0

nextB = i+J(k) = 0+J(0) = 0+0 = 0
pendSize = 3

if nextB > pendSize
	break;
0 >= 3 ? no

pendToInsert = X

// In this case, it's only b1, so it will be pendToInsert = 1

while pendToInsert > 0

insert(pend[nextB], rangeMainChain)
pendToInsert--

i--

pendToInsert = 0, loop done

Find next values

nextB = i + J(k) = 1 + 1 = 2
pendSize = 2

nextB > pendSize ? no

// Now I know we should insert b3, but let's see how that's calculated

   b1, b2, b3, b4, b5  ...
i= 0,  1,  2,  3,  4,  ...

   b1, b2, b3, b4, b5  ...
i= 0,  1,  2,  3,  4,  ...

while pendToInsert > 0

insert(pend[nextB], mainChain)
pendToInsert--
i--

pendIndex = Index at which pend is currently being inserted
pendNextEnd = Index at which pend finished its cycle of insertions
pend


Insert b3 must be calculated:

bN must be calculated.

To calculate N:

The order is

b1,b3,b2,b5,b4,b11,b10,b9,b8,b7,b6,b22,b21...b12,b43?

b1,b3,b2,b5,b4,b11,b10,b9,b8,b7,b6,b21,b20...b12,b43?

jn(2) = 1

b1,b2,b3,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15 ...
 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  10, 11, 12, 13, 14 ...

b1,b2,b3,b4,b5,b6,b7,b8,b9 ... 
 0, 1, 2, 3, 4, 5, 6, 7, 8 ... 

insert b1; b3, b2; b5, b4

pendEnd == 3
pendStart = 4
i == 2

xx,xx,xx,xx,xx,b6,b7,b8,b9
 0, 1, 2, 3, 4, 5, 6, 7, 8

b1,a1,b2,b5,a2,b4,b3,a3,a4,a5,a6,a7,a8,a9
 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13

/////////////////

a1,a2,a3,a4,a5,a6,a7,a8,a9
 0, 1, 2, 3, 4, 5, 6, 7, 8

b1,b2,b3,b4,b5,b6,b7,b8,b9
 0, 1, 2, 3, 4, 5, 6, 7, 8

insert b1

b1,a1,a2,a3,a4,a5,a6,a7,a8,a9
 0, 1, 2, 3, 4, 5, 6, 7, 8, 9

xx,b2,b3,b4,b5,b6,b7,b8,b9
 0, 1, 2, 3, 4, 5, 6, 7, 8

insert b3

b1,a1,a2,b3,a3,a4,a5,a6,a7,a8,a9
 0, 1, 2, 3, 4, 5, 6, 7, 8, 9

xx,b2,xx,b4,b5,b6,b7,b8,b9
 0, 1, 2, 3, 4, 5, 6, 7, 8

insert b3

b3 > a3 this MUST be true

b3 must be inserted in the main_chain, somewhere to the left of a3

we keep track of a3 in advance??


/////////

b1,a1,b2,b5,a2,b4,b3,a3,a4,a5,a6,a7,a8,a9
 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13

pendEnd = 5
i = 10
i >= pendSize
break;

insert from:
pend[8] to pend[5]



////////////////////////////////
calculatePendStart(prevEnd):
pendStart = prevEnd + jacobsthalNumber(k);

calculatePendEnd(prevStart):
pendEnd = prevStart + 1;

Inserting b1:
pendStart = 0;
pendEnd = 0;
i = pendStart;

insert(pend[i]);

if (i == pendEnd)
{
   k++;
   pendEnd = calculatependEnd(pendStart);
   pendStart = calculatependStart(pendStart, k);
   i = pendStart;
}
else
   i--;

k = 3;
//
k == 1
k = k + 1
k = 2 + 1
k = 3
//
pendEnd == 1
//
   pendEnd = prevStart + 1;
   pendEnd = 0 + 1
   pendEnd = 1
//
pendStart == 2
//
   jacobsthalNumber(k) =
   jacobsthalNumber(3) = 3;
   pendStart = jacobsthalNumber(k) - 1; // 0 indexed
   pendStart = jacobsthalNumber(3) - 1
   pendStart = 3 - 1
   pendStart = 2
//
i == 2
//
   i = pendStart
//

insert(pend[i]);

if (i == pendEnd)
///
else
   i--; <--

i == 1

insert(pend[i]);

if (i == pendEnd) <--
//// <--
else
////

k = 2;
//
k == 0
k = k + 1
k = 1 + 1
k = 2
//
pendEnd == 1
//
   pendEnd = prevStart + 1;
   pendEnd = 2 + 1
   pendEnd = 3
//
pendStart == 4
//
   pendStart = jacobsthalNumber(k) - 1
   pendStart = jacobsthalNumber(4) - 1
   pendStart = 5 - 1
   pendStart = 4
//
i == 4
//
   i = pendStart
//

insert(pend[i]);

/// [...]

insert(pend[i]);

if (i == pendEnd) <--
///

pendStart = 10
pendEnd = 5
i = 10

k = 3;
//
k == 0
k = k + 1
k = 2 + 1
k = 3
//
pendEnd == 5
//
   pendEnd = prevStart + 1;
   pendEnd = 4 + 1
   pendEnd = 5
//
pendStart == 10
//
   pendStart = jacobsthalNumber(k) - 1
   pendStart = jacobsthalNumber(5) - 1
   pendStart = 11 - 1
   pendStart = 10
//
i == 4
//
   i = pendStart
//

insert(pend[i]);
/// [...]
// insert 5 times








it00
5 4 7 1 3 2 9 6 8 ==> elementSize = 1

pair: ==> pairSize = 1*2 = 2
(5, 4) (7, 1) (3, 2) (9, 6); 8

it01
5, 7, 3, 9 ==> elementSize = 2
4  1  2  6

pair: ==> pairSize = 2*2 = 4
(5, 7), (3, 9)
 4  1    2  6

it02
5, 3 ==> elementSize = 4
4  2
7  9
1  6

pair: ==> pairSize = 4*2 = 8
(5, 3)
 4  2
 7  9
 1  6









